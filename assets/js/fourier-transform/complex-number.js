class ComplexNumber{constructor(a,r){this.real=a,this.imaginary=r}add(a){return new ComplexNumber(this.real+a.real,this.imaginary+a.imaginary)}Add(a,r){return new ComplexNumber(a.real+r.real,a.imaginary+r.imaginary)}subtract(a){return new ComplexNumber(this.real-a.real,this.imaginary-a.imaginary)}Subtract(a,r){return new ComplexNumber(a.real-r.real,a.imaginary-r.imaginary)}multiply(a){const r=this.real*a.real-this.imaginary*a.imaginary,i=this.real*a.imaginary+this.imaginary*a.real;return new ComplexNumber(r,i)}Multiply(a,r){const i=a.real*r.real-a.imaginary*r.imaginary,e=a.real*r.imaginary+a.imaginary*r.real;return new ComplexNumber(i,e)}divide(a){const r=a.real**2+a.imaginary**2,i=(this.real*a.real+this.imaginary*a.imaginary)/r,e=(this.imaginary*a.real-this.real*a.imaginary)/r;return new ComplexNumber(i,e)}Divide(a,r){const i=r.real**2+r.imaginary**2,e=(a.real*r.real+a.imaginary*r.imaginary)/i,n=(a.imaginary*r.real-a.real*r.imaginary)/i;return new ComplexNumber(e,n)}magnitude(){return Math.sqrt(this.real**2+this.imaginary**2)}phase(){return Math.atan2(this.imaginary,this.real)}toPolar(){return{r:this.magnitude(),phi:this.phase()}}toString(){return`${this.real} + ${this.imaginary}i`}}